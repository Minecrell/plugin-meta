plugins {
    id 'java'

    id 'eclipse'
    id 'idea'

    id 'maven'
    id 'nebula.provided-base' version '3.1.0'
    id 'com.jfrog.bintray' version '1.7.3'

    id 'net.minecrell.licenser' version '0.3'
}

group = 'org.spongepowered'
version = '0.4.3-SNAPSHOT'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    jcenter()
}

dependencies {
    compile 'com.google.guava:guava:17.0'
    compile 'com.google.code.gson:gson:2.2.4'

    provided 'com.google.code.findbugs:jsr305:1.3.9'

    testCompile 'junit:junit:4.12'
}

test {
    testLogging {
        exceptionFormat = 'full' // Always print full stack trace if something goes wrong in the unit tests
        showStandardStreams = true
    }
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourceJar
    archives javadocJar
}

license {
    header = file('HEADER.txt')
    newLine = false
    ext {
        name = project.name
        organization = project.organization
        url = project.url
    }
}

// Support uploading with FTP
configurations {
    deployerJars // Deployment dependency
}

dependencies {
    deployerJars 'org.apache.maven.wagon:wagon-ftp:2.10'
}

def pom = {
    artifactId = project.archivesBaseName

    project {
        name = project.archivesBaseName
        description = project.description
        packaging = 'jar'
        url = project.url

        scm {
            url = "https://github.com/$project.organization/$project.name"
            connection = "scm:git:https://github.com/$project.organization/${project.name}.git"
            developerConnection = "scm:git:git@github.com:$project.organization/${project.name}.git"
        }

        issueManagement {
            system = 'GitHub Issues'
            url = "https://github.com/$project.organization/$project.name/issues"
        }

        licenses {
            license {
                name = 'MIT License'
                url = 'http://opensource.org/licenses/MIT'
                distribution = 'repo'
            }
        }
    }
}

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars

        // This is set by the build server when deploying to the repo
        if (project.hasProperty('spongeRepo')) {
            repository(url: project.spongeRepo) {
                if (project.hasProperty('spongeUsername') && project.hasProperty('spongePassword')) {
                    authentication(userName: project.spongeUsername, password: project.spongePassword)
                }
            }
        }

        it.pom pom
    }
}

install {
    repositories.mavenInstaller {
        it.pom pom
    }
}

bintray {
    if (project.hasProperty('bintrayUser')) {
        user = project.bintrayUser
        key = project.bintrayKey
    }

    configurations = ['archives']
    pkg {
        repo = 'maven'
        name = project.name
        userOrg = 'spongepowered'
        desc = project.description
        licenses = ['MIT']

        websiteUrl = project.github
        issueTrackerUrl = "$websiteUrl/issues"
        vcsUrl = "${websiteUrl}.git"

        labels = ['minecraft', 'sponge']

        publicDownloadNumbers = true

        version {
            name = project.version
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
}
